{
  "name": "fulldeck",
  "version": "1.0.0",
  "description": "Full-stack gaming platform with React frontend and Node.js backend",
  "private": true,
  "scripts": {
    "sync-core": "node scripts/sync-core.js",
    "setup": "echo '=== NEW SESSION STARTED:' $(date -u +%Y-%m-%dT%H:%M:%SZ) '===' > test-session.log && echo 'Frontend/Backend Test Log - Auto-generated, not committed' >> test-session.log && echo '========================================================' >> test-session.log && npm run sync-core && npm install && cd backend && npm install && cd ../frontend && npm install && cd ..",
    "get-port": "node scripts/get-port.js",
    "start:database": "docker start postgres-local || docker run --name postgres-local -p $(npm run get-port databasePort --silent):5432 -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=fulldeck_dev -d postgres:17",
    "start:adminer": "docker start adminer || docker run --name adminer --link postgres-local:db -p $(npm run get-port adminerPort --silent):8080 -d adminer",
    "start:docker": "npm run start:database && npm run start:adminer",
    "stop:docker": "docker stop adminer postgres-local || true",
    "start:backend": "cd backend && set NODE_ENV=development && npm run dev",
    "start:backend:qa": "cd backend && set NODE_ENV=qa && npm run dev",
    "start:backend:staging": "cd backend && set NODE_ENV=staging && npm run dev", 
    "start:backend:prod": "cd backend && set NODE_ENV=production && npm run dev",
    "start:frontend": "cd frontend && set NODE_ENV=development && npm run web -- --port $(npm run get-port frontendPort --silent)",
    "start:frontend:qa": "cd frontend && set NODE_ENV=qa && npm run web -- --port $(npm run get-port frontendPort qa --silent)",
    "start:frontend:staging": "cd frontend && set NODE_ENV=staging && npm run web -- --port $(npm run get-port frontendPort staging --silent)",
    "start:frontend:prod": "cd frontend && set NODE_ENV=production && npm run web -- --port $(npm run get-port frontendPort production --silent)",
    "startlocal": "npm run setup && npm run start:docker && concurrently --names \"BACKEND,FRONTEND\" --prefix name --prefix-colors \"cyan,magenta\" \"npm run start:backend\" \"npm run start:frontend\"",
    "startlocal:qa": "npm run setup && npm run start:docker && concurrently --names \"BACKEND,FRONTEND\" --prefix name --prefix-colors \"cyan,magenta\" \"npm run start:backend:qa\" \"npm run start:frontend:qa\"",
    "startlocal:staging": "npm run setup && npm run start:docker && concurrently --names \"BACKEND,FRONTEND\" --prefix name --prefix-colors \"cyan,magenta\" \"npm run start:backend:staging\" \"npm run start:frontend:staging\"",
    "startlocal:prod": "npm run setup && echo \"WARNING: Production config with local Docker\" && npm run start:docker && concurrently --names \"BACKEND,FRONTEND\" --prefix name --prefix-colors \"cyan,magenta\" \"npm run start:backend:prod\" \"npm run start:frontend:prod\"",
    "install-all": "npm install && npm install --workspace=frontend && npm install --workspace=backend",
    "build": "npm run build --workspace=frontend && npm run build --workspace=backend",
    "clean": "rm -rf node_modules frontend/node_modules backend/node_modules"
  },
  "dependencies": {
    "concurrently": "^8.2.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  }
}